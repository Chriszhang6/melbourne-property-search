对任何问题，先规划，再执行
当你在执行的过程中，遇到任何问题，把经验教训返回到 .cursourrules文件中

用中文回答我

## DuckDuckGo 命令行搜索工具

你可以使用一个简单的命令行搜索工具，叫做search_cli.py，可以使用 DuckDuckGo 搜索引擎进行搜索并显示结果。

## 安装

1. 确保您已安装 Python 3.6 或更高版本
2. 安装依赖包：
```bash
pip install -r requirements.txt
```

## 使用方法

基本使用：
```bash
python search_cli.py "搜索关键词"
```

指定显示结果数量：
```bash
python search_cli.py "搜索关键词" -n 10
```

## 参数说明
- `query`: 必需参数，指定搜索关键词
- `-n` 或 `--num`: 可选参数，指定显示结果数量，默认为5 

## 调试经验

1. API 版本兼容性：
   - duckduckgo-search 包的API可能会随版本更新而变化
   - 在使用第三方包时，最好先查看最新的文档

2. 错误处理：
   - 在调用API时要做好异常处理
   - 对于可能不存在的字段，使用 dict.get() 方法设置默认值

3. 输出格式化：
   - 使用 rich 库可以美化命令行输出
   - 对于过长的文本，要适当截断并添加省略号

4. 功能测试：
   - 在开发过程中要经常测试
   - 当一个方法不可用时，可以尝试其他替代方法 

## 房产网站数据获取经验

1. API vs 爬虫：
   - 优先使用官方提供的API
   - API通常更稳定且合法
   - 爬虫可能违反网站使用条款

2. 官方API使用：
   - 检查API文档和使用条件
   - 注意API的访问限制和费用
   - 遵守API的使用规范

3. 认证和安全：
   - 使用OAuth进行安全认证
   - 保护API密钥和用户凭据
   - 遵守数据隐私规定

4. 替代方案：
   - 使用官方移动应用
   - 利用网站的提醒功能
   - 订阅官方的市场报告

## web_scraper命令行搜索工具

你可以使用一个简单的命爬虫搜索工具，叫做web_scraper.py，可以爬取网页内容，并保存到本地。

## OpenAI API 客户端使用经验

1. 版本兼容性问题：
   - OpenAI API 客户端在 1.0.0 版本后有重大更新
   - 新版本移除了 proxies 参数支持
   - 初始化方式从 openai.ChatCompletion 改为 client.chat.completions
   - httpx 库不支持在客户端初始化时传入 proxies 参数

2. 正确的初始化方式：
   ```python
   # 方式一：使用环境变量（推荐）
   client = openai.OpenAI()  # 不传入任何参数，自动从环境变量获取

   # 方式二：直接传入 API 密钥（不推荐）
   client = openai.OpenAI(api_key="your-api-key")
   ```

3. 环境变量配置：
   - 设置 OPENAI_API_KEY 环境变量
   - 使用 python-dotenv 加载 .env 文件
   - 在代码中验证环境变量是否存在

4. 代理设置：
   - 新版本不支持在客户端初始化时设置代理
   - 必须通过环境变量设置代理
   - 支持的环境变量：
     * OPENAI_PROXY
     * HTTPS_PROXY
     * HTTP_PROXY
   - 代理设置示例：
     ```python
     # 方式一：直接设置环境变量
     os.environ['OPENAI_PROXY'] = 'http://127.0.0.1:7890'
     
     # 方式二：从已有代理环境变量获取
     if os.getenv('HTTPS_PROXY'):
         os.environ['OPENAI_PROXY'] = os.getenv('HTTPS_PROXY')
     ```

5. 错误处理最佳实践：
   - 验证 API 密钥是否设置
   - 捕获特定的 API 异常
   - 使用日志记录错误详情
   - 实现错误重试机制

6. 性能优化：
   - 使用缓存减少重复请求
   - 合理设置 timeout 参数
   - 控制 token 使用量
   - 避免全局客户端实例

7. 安全注意事项：
   - 不要在代码中硬编码 API 密钥
   - 使用环境变量管理敏感信息
   - 注意请求频率限制
   - 保护用户敏感信息

8. 调试技巧：
   - 使用测试 API 密钥进行开发
   - 实现详细的日志记录
   - 使用 try-except 捕获具体异常
   - 验证 API 响应内容
   - 检查代理设置是否生效

## 调试技巧

1. 日志记录：
   - 使用 logging 模块记录详细信息
   - 包含时间戳和错误堆栈
   - 区分不同级别的日志

2. 错误追踪：
   - 使用 traceback 模块获取完整堆栈
   - 记录异常发生的上下文
   - 实现错误通知机制

3. 测试策略：
   - 先测试 API 连接
   - 验证参数正确性
   - 模拟各种错误场景
